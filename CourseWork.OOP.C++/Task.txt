Вариант 10
Создать класс Confection, включающий в себя следующие элементы:
- поле «Название» char * Name;
- поле «Дата изготовления»
	struct Date {int year; int month; int day} ProductDate;
- поле «Срок годности»
	struct Date {int year; int month; int day} BestBefore;
- включить в класс поле класса Filling (начинка) Filling * filling;
- метод получения даты изготовления int GetProductDate();
- метод получения названия int GetName();
- метод добавления начинки void AddFilling(Filling filling);
- конструктор с параметрами
	Confection (char * Name, Date ProductDate, Date BestBefore, Filling * filling).

Создать класс Filling, содержащий в себе элементы:
- поле «количество ингредиентов» int Number;
- поле «Название» char * Name;
- конструктор с параметрами Filling (int Number, char * Name);
- метод «Удалить ингредиент» void AddIngredient ();
- метод «Добавить ингредиент» void DelIngredient ().

В классе Confection перегрузить оператор ~ (унарный оператор класса),
новое действие - удалить начинку.

==================================================================================================================================
==================================================================================================================================
==================================================================================================================================

Входные данные следует организовать в виде файлов
	(в том числе тексты для пользовательского интерфейса, справки на и т.п),
	сведя к минимуму ввод данных непосредственно пользователем.
Результаты работы (состояние объектов системы)
	необходимо представить в виде файлов,
	в соответствии с требованиями, зафиксированными в "Техническом задании".
Необходимо обеспечить двуязычие языка общения с пользователем.

Ввод данных пользователем организовать
	в режиме диалога с проверкой корректности ввода.
Команды для выбора режима работы ООС
	и выполнение сценария работы с программой сгруппировать в меню,
	сократив объем ввода информации пользователем.
ООС должна работать в режимах:
	а) описание предметной области (ПрО);
	б) режим демонстрации работы объектов;
		а также иметь систему помощи.
Режим демонстрации работы объектов должен выполнять действия
	а) создание объектов базовых классов;
	б) демонстрация состояния объектов базовых классов;
	в) создание объектов производных классов;
	г) демонстрация состояния объектов производных классов;
	д) перегрузку операторов базовых классов;
	е) перегрузку операторов производных классов.

Порция информации, предоставленная пользователю на экране в отдельный момент времени, называется кадром.
Работа демонстрационного примера должна начинаться с формы «Заставка».
Текст заставки должен содержать:
- название ВУЗа, факультета, кафедры;
- название темы индивидуального задания;
- фамилию и инициалы студента;
- название группы;
- фамилию и инициалы руководителя курсового проекта;
- место и год создания.
Также на заставке необходимо предусмотреть возможность изменения языка общения с пользователем.
	Следующий кадр должен содержать главное меню с режимами работы ООС.
Кадр описания ПрО должен содержать описание функционального назначения ООС и описание предметной области.
Кадр режима демонстрации работы объектов должен содержать меню с возможными действиями над объектами.

Файлы данных должны располагаться:
в) в любом месте файловой системы
	и путь доступа к файлам определяется пользователем на этапе выполнения программы.
	Тогда необходимо предусмотреть в главном меню ООС опцию настройки,
	в которой пользователь указывает путь доступа к файлам данных и/или их имена;
		Решение в) соответствует требованиям на оценку "хорошо".
г) в любом месте файловой системы,
	но пользователю не приходится вводить путь доступа к файлам.
	Тогда необходимо предусмотреть в файловой системе ООС
	файл конфигурации с данными о пути доступа к файлам данных и/или их именах;
		Решение г) соответствует требованиям на оценку "отлично".

==================================================================================================================================
==================================================================================================================================
==================================================================================================================================

Критерии оценивания программного изделия по степени выполнения требований для инкапсуляции:
	для оценки «отлично»:
1) реализованы два класса, описание которых представлено в словесном описании предметной области;
	2) реализованы дополнительные классы, расширяющие словесное описание предметной области и возможности интерфейса программы;
		3) для каждого из классов предусмотрена возможность подсчета количества объектов, существующих в текущий момент в программе.

Критерии оценивания программного изделия по степени выполнения требований для наследования:
	для оценки «отлично»:
1) реализованы классы, описание которых представлено в словесном описании предметной области, и указанные отношения между ними;
	2) реализованы дополнительные классы - иерархия классов и/или контейнерные классы (одиночное наследование);
		3) реализовано множественное наследование.

Критерии оценивания программного изделия по степени выполнения требований для полиморфизма
	для оценки «отлично»: 
1) реализована перегрузка только тех операторов, описание которых представлено в словесном описании предметной области; 
	2) реализована перегрузка операторов для всех дополнительных классов;  
	3) перегрузка операторов выполнена как внутри, так и вне класса. 
		4) в реализации полиморфизма использованы абстрактные классы и виртуальные функции.

Критерии оценивания программного изделия по степени выполнения требований к демонстрации работы системы
	для оценок «хорошо» и «отлично»:
1) результаты работы выводятся в системный поток вывода;
	2) состояние объектов системы выводится в файловый поток вывода.

Критерии оценивания программного изделия по степени выполнения требований в режиме помощи
	для оценок «хорошо» и «отлично» - использование файлов: 
1) о программе (программный документ “Описание программы”); 
2) руководство оператора (программный документ); 
3) об авторе.

Критерии оценивания программного изделия по степени выполнения требований по организации работы с файлами
	для оценки «отлично»:  
1) путь доступа к файлам определяется пользователем на этапе выполнения программы
(наличие файла конфигурации с данными о пути доступа к файлам данных и/или их именах); 
	2) предусмотрена обработка исключительных ситуаций при работе с файлами.

Критерии оценивания программного изделия по степени выполнения требований по обеспечению двуязычия интерфейса пользователя
	для оценок «хорошо» и «отлично»:  
1) приложение имеет произвольную пару языков общения (тексты надписей читаются из файлов); 
2) переключение языков реализовано на каждом кадре интерфейса; 
3) двуязычие реализовано для всех режимов работы;